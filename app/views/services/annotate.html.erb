<style>
#pointToast {
  position: absolute;
  display: none;
  left: 50%;
  transform: translateX(-50%);
  padding: 2rem 5rem;
  background: #fff;
  border: 1px solid #ffe;
  box-shadow: #ccc 1px 1px 1rem;
  white-space: nowrap;
  opacity: 0;
  transition: opacity 200ms ease;
}

#pointToast.withSelection {
  display: block;
  opacity: 1;
}
</style>

<div id="pointToast">
  <form id="pointDropdown">
    <select>
      <% @points.each do |p| %>
        <% if !(p.quoteDoc) %>
          <option data-point-id="<%= p.id %>"><%= p.title %></option>
        <% end %>
      <% end %>
    </select>
    <button type="submit" class="btn btn-primary">Annotate</button>
  </form>
</div>

<form method="POST" id="quoteForm">
  <input type="hidden" name="authenticity_token" value="<%= form_authenticity_token %>">
  <input type="hidden" name="quoteDoc" id="quoteDoc">
  <input type="hidden" name="quoteRev" id="quoteRev">
  <input type="hidden" name="quoteStart" id="quoteStart">
  <input type="hidden" name="quoteEnd" id="quoteEnd">
  <input type="hidden" name="quotePointId" id="quotePointId">
</form>

<div id="files">
  <% @documents.each do |doc| %>
    <h2><%= link_to doc.name, document_path(doc) %> (<%= doc.xpath %>)</h2>
    <div>
      <% offset = 0 %>
      <% doc.snippets.each do |snippet| %>
        <% if snippet[:pointId] %>
          <p><%= link_to snippet[:text], point_path(snippet[:pointId]), :data => { :filename => doc.name, :offset => offset }%></p>
        <% else %>
          <p> <%= content_tag(:div, snippet[:text], :data => { :filename => doc.name, :revision => 'latest', :offset => offset }) %> </p>
        <% end %>
        <% offset += snippet[:text].length %>
      <% end %>
    </div>
  <% end %>
</div>

<script>
  function linkSelectionToPoint(pointDropdownSubmitEvent) {
    pointDropdownSubmitEvent.preventDefault();

    const pointDropdown = document.querySelector('#pointDropdown select');
    const pointId = pointDropdown.options[pointDropdown.selectedIndex].dataset.pointId;

    const selection = window.getSelection()
    console.log(JSON.stringify(selection.anchorNode.parentElement.dataset));

    const spanOffset = parseInt(selection.anchorNode.parentElement.dataset['offset'], 10);
    const selectionStart = Math.min(selection.anchorOffset, selection.focusOffset);
    const selectionEnd = Math.max(selection.anchorOffset, selection.focusOffset);
    console.log('linkQuoteToPoint', pointId,
      spanOffset,
      spanOffset + selectionStart,
      spanOffset + selectionEnd
    )
    quoteDoc.value =  selection.anchorNode.parentElement.dataset['filename'];
    quoteRev.value =  selection.anchorNode.parentElement.dataset['revision'];
    quoteStart.value = spanOffset + selectionStart
    quoteEnd.value = spanOffset + selectionEnd
    quotePointId.value = pointId

    const quoteForm = document.getElementById('quoteForm');
    quoteForm.submit();
  }

  function createSnippetElement(snippet) {
    const element = (typeof snippet.pointId !== 'undefined')
      ? document.createElement('a')
      : document.createElement('span');

    element.textContent = snippet.content;
    element.dataset.offset = snippet.offset;
    element.dataset.filename = snippet.file.name;
    element.dataset.revision = snippet.file.revision;

    if (typeof snippet.pointId !== 'undefined') {
      element.style.backgroundColor = '#ffeaa7';
      element.style.color = 'inherit';
      element.href = '/points/' + snippet.pointId + '/edit';
    }

    return element;
  }

  function getAnnotatedElements(file, annotations) {
    const container = document.createElement('div');
    let currentPosition = 0;
    annotations.forEach(annotation => {
      const leadText = createSnippetElement({
        content: file.contents.substring(currentPosition, annotation.start),
        offset: currentPosition,
        file: file,
      });

      const annotatedText = createSnippetElement({
        content: file.contents.substring(annotation.start, annotation.end),
        offset: currentPosition,
        file: file,
        pointId: annotation.pointId,
      });

      container.appendChild(leadText);
      container.appendChild(annotatedText);
      currentPosition = annotation.end;
    });

    const unannotatedTail = createSnippetElement({
      content: file.contents.substring(currentPosition),
      offset: currentPosition,
      file: file,
    });
    container.appendChild(unannotatedTail);

    return container;
  }

  var annotations = {}
  function fetchDoc(serviceName, filename, rev) {
    console.log('fetchDoc', serviceName, filename, rev)

    var xhr = new XMLHttpRequest()
    xhr.open('GET', 'https://raw.githubusercontent.com/tosdr/tosback2/'
      + rev + '/crawl_reviewed/'
      + encodeURIComponent(serviceName) + '/'
      + filename, true)

    xhr.onload = function() {
      const file = {
        contents: xhr.response,
        name: filename,
        revision: rev,
      };

      annotations[filename][rev].sort((a, b) => a.start - b.start)

      const filesElement = document.getElementById('files');
      var h = document.createElement('h2')
      h.textContent = filename
      filesElement.appendChild(h)

      const annotatedElements = getAnnotatedElements(file, annotations[filename][rev]);
      filesElement.appendChild(annotatedElements);
    }
    xhr.send()
  }
  
  function registerQuote(doc, rev, start, end, pointId) {
    if (doc) {
      console.log(doc, rev, start, end, pointId)
      if (!annotations[doc]) {
        annotations[doc] = {}
      }
      if (!annotations[doc][rev]) {
        annotations[doc][rev] = []
        fetchDoc(/* global */ serviceDomain, doc, rev)
      }
      annotations[doc][rev].push({ start, end, pointId})
    }
  }

  // ...
  var serviceDomain = '<%=escape_javascript @service.url.split(',')[0] %>'

  const pointDropdown = document.getElementById('pointDropdown');
  pointDropdown.addEventListener('submit', linkSelectionToPoint);

  document.addEventListener('selectionchange', () => {
    const selection = document.getSelection();
    // topOfPage is negative if we're scrolled down:
    const topOfPage = document.body.getBoundingClientRect().top;
    const selectionBottom = selection.getRangeAt(0).getBoundingClientRect().bottom - topOfPage;

    const pointSelectionToast = document.getElementById('pointToast');
    pointSelectionToast.style.top = (selectionBottom + 10).toString() + 'px';

    if (selection.toString().length > 0) {
      pointSelectionToast.classList.add('withSelection');
    } else {
      pointSelectionToast.classList.remove('withSelection');
    }
  });
</script>

