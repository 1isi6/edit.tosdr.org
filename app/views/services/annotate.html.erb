<style>
#caseToast {
  position: absolute;
  display: none;
  left: 50%;
  transform: translateX(-50%);
  padding: 2rem 5rem;
  background: #fff;
  border: 1px solid #ffe;
  box-shadow: #ccc 1px 1px 1rem;
  white-space: nowrap;
  opacity: 0;
  transition: opacity 200ms ease;
}

#caseToast.withSelection {
  display: block;
  opacity: 1;
}
</style>

<div id="caseToast">
  <form id="caseDropdown">
    <select>
      <% @topics.each do |t| %>
        <optgroup label="<%= t.title %>">
          <% t.cases.each do |c| %>
            <option data-case-id="<%= c.id %>"><%= c.title %></option>
          <% end %>
        </optgroup>
      <% end %>
    </select>
    <button type="submit" class="btn btn-primary">Annotate</button>
  </form>
</div>

<form method="POST" id="quoteForm">
  <input type="hidden" name="authenticity_token" value="<%= form_authenticity_token %>">
  <input type="hidden" name="document_id" id="document_id">
  <input type="hidden" name="quoteRev" id="quoteRev">
  <input type="hidden" name="quoteStart" id="quoteStart">
  <input type="hidden" name="quoteEnd" id="quoteEnd">
  <input type="hidden" name="quoteCaseId" id="quoteCaseId">
</form>

<h2><%= link_to  @service.name, service_path(@service) %></h2>

<div id="toc">
  <p>Documents:</p>
  <ul class="list-group">
    <% @documents.each do |doc| %>
      <li class="list-group-item">
        <a href="#doc_<%= doc.id %>"><%= doc.name %></a>
      </li>
    <% end %>
    <li style="list-style-type: none; padding-top: 1rem;">
      <%= link_to "Add a document", new_document_path(service: @service), title: "Add a new document to crawl", class: "btn btn-default" %>
    </li>
  </ul>
</div>

<div id="files">
  <% @documents.each do |doc| %>
    <div class="docAnchor" id="doc_<%= doc.id %>">
      <div class="panel panel-default">
        <div
          class="panel-heading"
        ><h3 class="h5"><%= link_to doc.name, document_path(doc) %></h3>
        </div>
        <div class="panel-body documentContent" data-content="<%= doc.text %>">
          <% offset = 0 %>
          <% doc.snippets.each do |snippet| %>
            <% if snippet[:pointId] %>
              <p><%= link_to hide_tags(snippet[:text]), point_path(snippet[:pointId]), title: snippet[:title], :data => { :document_id => doc.id, :offset => offset }%></p>
            <% else %>
              <p> <%= content_tag(:div, hide_tags(snippet[:text]), :data => { :document_id => doc.id, :revision => 'latest', :offset => offset }) %> </p>
            <% end %>
            <% offset += snippet[:text].length %>
          <% end %>
        </div>
      </div>
    </div>
  <% end %>
</div>

<script>
  function getDataElement(selectionNode) {
    if (
      !selectionNode.parentElement ||
      !selectionNode.parentElement.dataset ||
      !selectionNode.parentElement.dataset.documentId
    ) {
      // The document element usually is the parent element of nodes in the selection.
      // However, since there are also "hidden" nodes (containing HTML of the scraped documents),
      // we might have to look at the parent of the parent.
      // (Of course this could also be done recursively, but then we'd be traversing the DOM all the way up.)
      if(
        !selectionNode.parentElement ||
        !selectionNode.parentElement.parentElement ||
        !selectionNode.parentElement.parentElement.dataset ||
        !selectionNode.parentElement.parentElement.dataset.documentId
      ) {
        return null;
      }
      return selectionNode.parentElement.parentElement;
    }

    return selectionNode.parentElement;
  }

  function getDocumentData(selectionNode) {
    const dataElement = getDataElement(selectionNode);

    return dataElement ? dataElement.dataset : null;
  }

  function linkSelectionToCase(caseDropdownSubmitEvent) {
    caseDropdownSubmitEvent.preventDefault();

    const caseDropdown = document.querySelector('#caseDropdown select');
    const caseId = caseDropdown.options[caseDropdown.selectedIndex].dataset.caseId;

    const selection = window.getSelection()
    // On the page (and hence in our selection), all whitespace is rendered as spaces.
    // (Don't ask me how long I spent debugging non-breaking spaces :S)
    // We convert them to spaces in the document as well, to be able to find the selected text there.
    // Since the actual quote is stored in the database as a text range, this doesn't matter,
    // as long as the amount of characters in the selection is accurate.
    const documentContent = getDataElement(selection.anchorNode).parentElement.dataset.content.replace(/\s/g, ' ');
    const documentData = getDocumentData(selection.anchorNode);

    // Convert all whitespace in the selection to spaces for consistency with the document.
    const quotedText = selection.toString().replace(/\s/g, ' ');

    const selectionStart = documentContent.indexOf(quotedText);

    document_id.value =  documentData.documentId;
    quoteRev.value =  documentData.revision;
    quoteStart.value = selectionStart
    quoteEnd.value = selectionStart + quotedText.length
    quoteCaseId.value = caseId

    const quoteForm = document.getElementById('quoteForm');

    quoteForm.submit();
  }

  const caseDropdown = document.getElementById('caseDropdown');
  caseDropdown.addEventListener('submit', linkSelectionToCase);

  document.addEventListener('selectionchange', () => {
    const selection = document.getSelection();
    const caseSelectionToast = document.getElementById('caseToast');

    // Make sure the current selection is part of one of the documents:
    if (
      selection.toString().length === 0 ||
      !getDataElement(selection.anchorNode) ||
      getDataElement(selection.anchorNode) !== getDataElement(selection.focusNode)
    ) {
      caseSelectionToast.classList.remove('withSelection');
      return;
    }

    // topOfPage is negative if we're scrolled down:
    const topOfPage = document.body.getBoundingClientRect().top;
    const selectionBottom = selection.getRangeAt(0).getBoundingClientRect().bottom - topOfPage;

    caseSelectionToast.style.top = (selectionBottom + 10).toString() + 'px';
    caseSelectionToast.classList.add('withSelection');
  });
</script>

